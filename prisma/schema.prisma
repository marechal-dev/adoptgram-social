generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model CommonUser {
  id                String  @id @default(uuid())
  username          String  @unique
  email             String  @unique
  passwordHash      String  @map("password_hash")
  profilePictureUrl String? @map("profile_picture_url")
  firstName         String  @map("first_name")
  surname           String
  cpf               String  @unique

  following Follow[]

  @@map("common_users")
}

model Organization {
  id                 String  @id @default(uuid())
  username           String  @unique
  email              String  @unique
  passwordHash       String  @map("password_hash")
  profilePictureUrl  String? @map("profile_picture_url")
  title              String
  representativeName String  @map("representative_name")
  bio                String?
  pixKey             String? @map("pix_key")
  whatsapp           String
  residentialNumber  String? @map("residential_number")

  availablePets Pet[]
  posts         Post[]
  address       Address?

  followers Follow[]

  @@map("organizations")
}

model Pet {
  id                      String  @id @default(uuid())
  name                    String
  bio                     String
  age                     Int
  isCastrated             Boolean @map("is_castrated")
  requireMedicalAttention Boolean @map("require_medical_attention")
  isVaccinated            Boolean @map("is_vaccinated")

  size        PetSize
  energyLevel PetEnergyLevel @map("energy_level")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  adoptionRequirements AdoptionRequirement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [organizationId], map: "org_id_fk_idx", type: BTree)
  @@index(fields: [isCastrated], map: "is_castrated_idx", type: BTree)
  @@map("pets")
}

model Post {
  id          String  @id @default(uuid())
  textContent String?
  likes       Int

  organizationProfile   Organization @relation(fields: [organizationProfileId], references: [id], onDelete: Cascade)
  organizationProfileId String       @map("organization_profile_id")

  medias   Media[]
  comments Comment[]

  @@index([organizationProfileId], map: "post_org_id_idx")
  @@map("posts")
}

model Comment {
  id      String @id @default(uuid())
  content String

  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @map("post_Id")

  @@index([postId], map: "comment_post_id_idx")
  @@map("comments")
}

model Follow {
  commonUser          CommonUser @relation(fields: [commonUserProfileId], references: [id], onDelete: Cascade)
  commonUserProfileId String     @map("common_user_profile_id")

  organization          Organization @relation(fields: [organizationProfileId], references: [id], onDelete: Cascade)
  organizationProfileId String       @map("organization_profile_id")

  followedAt DateTime @default(now())

  @@id([commonUserProfileId, organizationProfileId])
  @@index([commonUserProfileId], map: "follow_common_user_profile_idx")
  @@index([organizationProfileId], map: "follow_organization_profile_idx")
  @@map("follows")
}

model Address {
  id           String  @id @default(uuid())
  firstLine    String  @map("first_line")
  secondLine   String? @map("second_line")
  number       String /// "number" is a text because it can be an alphanumeric value, like: "123a"
  neighborhood String
  city         String
  state        String
  cep          String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @unique @map("organization_id")

  @@index([organizationId], map: "address_org_id_idx")
  @@index([cep], map: "address_cep_idx", type: Hash)
  @@map("organizations_addresses")
}

model AdoptionRequirement {
  id   String @id @default(uuid())
  info String

  requirementType AdoptionRequirementType

  Pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String @map("pet_id")

  @@index(fields: [petId], map: "adoption_requirements_pet_id_idx", type: BTree)
  @@map("adoption_requirements")
}

model Media {
  id   String    @id @default(uuid())
  type MediaType
  url  String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @map("post_id")

  @@index([postId], map: "media_post_id_idx")
  @@map("medias")
}

// Enums
enum PetSize {
  Small  @map("SMALL")
  Medium @map("MEDIUM")
  Big    @map("BIG")

  @@map("pet_size")
}

enum PetEnergyLevel {
  VeryLow  @map("VERY_LOW")
  Low      @map("LOW")
  Medium   @map("MEDIUM")
  High     @map("HIGH")
  VeryHigh @map("VERY_HIGH")

  @@map("pet_energy_level")
}

enum AdoptionRequirementType {
  Space   @map("SPACE")
  Medical @map("MEDICAL")

  @@map("adoption_requirement_type")
}

enum MediaType {
  Image @map("IMAGE")
  Video @map("VIDEO")

  @@map("media_type")
}

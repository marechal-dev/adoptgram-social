generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model CommonUser {
  id                String    @id @default(uuid())
  username          String    @unique
  email             String    @unique
  password          String
  profilePictureUrl String?   @map("profile_picture_url")
  name              String
  cpf               String    @unique
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  following       Follow[]
  createdComments Comment[]

  @@map("common_users")
}

model Organization {
  id                 String    @id @default(uuid())
  username           String    @unique
  email              String    @unique
  password           String
  profilePictureUrl  String?   @map("profile_picture_url")
  title              String
  representativeName String    @map("representative_name")
  cnpj               String    @unique
  bio                String?
  pixKey             String?   @map("pix_key")
  whatsapp           String
  telephoneNumber    String?   @map("telephone_number")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")

  followers     Follow[]
  availablePets Pet[]
  posts         Post[]
  localization  Localization?

  @@map("organizations")
}

model Localization {
  id             String  @id @default(uuid())
  latitude       Decimal
  longitude      Decimal
  cep            String
  addressLine    String
  organizationId String  @unique

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([cep], map: "localization_cep_idx", type: BTree)
  @@map("localizations")
}

model Follow {
  commonUserID   String   @map("common_user_id")
  organizationID String   @map("organization_id")
  createdAt      DateTime @default(now()) @map("created_at")

  organization Organization @relation(fields: [organizationID], references: [id], onDelete: Cascade)
  commonUser   CommonUser   @relation(fields: [commonUserID], references: [id], onDelete: Cascade)

  @@id([commonUserID, organizationID])
  @@map("follows")
}

model Pet {
  id                      String         @id @default(uuid())
  name                    String
  bio                     String
  age                     Int
  isCastrated             Boolean        @map("is_castrated")
  requireMedicalAttention Boolean        @map("require_medical_attention")
  isVaccinated            Boolean        @map("is_vaccinated")
  size                    PetSize
  energyLevel             PetEnergyLevel @map("energy_level")
  ownerOrganizationID     String         @map("owner_organization_id")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime?      @updatedAt

  ownerOrganization    Organization          @relation(fields: [ownerOrganizationID], references: [id], onDelete: Cascade)
  adoptionRequirements AdoptionRequirement[]

  @@index(fields: [ownerOrganizationID], map: "org_id_fk_idx", type: BTree)
  @@index(fields: [isCastrated], map: "is_castrated_idx", type: BTree)
  @@map("pets")
}

model AdoptionRequirement {
  id              String                  @id @default(uuid())
  description     String
  requirementType AdoptionRequirementType
  petId           String

  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId], map: "adoption_requirement_pet_id_idx", type: BTree)
  @@map("adoption_requirements")
}

model Post {
  id             String    @id @default(uuid())
  textContent    String?
  likes          Int
  organizationId String    @map("organization_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt

  medias       Media[]
  comments     Comment[]
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId], map: "post_organization_id_idx", type: BTree)
  @@map("posts")
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  postId      String    @map("post_Id")
  commenterID String    @map("commenter_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt

  commenter CommonUser @relation(fields: [commenterID], references: [id], onDelete: Cascade)
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([commenterID], map: "commenter_id_comment_idx", type: BTree)
  @@index([postId], map: "comment_post_id_idx", type: BTree)
  @@map("comments")
}

model Media {
  id        String    @id @default(uuid())
  type      MediaType
  url       String
  postId    String    @map("post_id")
  createdAt DateTime  @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId], map: "media_post_id_idx", type: BTree)
  @@map("medias")
}

// Enums
enum PetSize {
  Small  @map("SMALL")
  Medium @map("MEDIUM")
  Big    @map("BIG")

  @@map("PET_SIZE")
}

enum PetEnergyLevel {
  VeryLow  @map("VERY_LOW")
  Low      @map("LOW")
  Medium   @map("MEDIUM")
  High     @map("HIGH")
  VeryHigh @map("VERY_HIGH")

  @@map("PET_ENERGY_LEVEL")
}

enum AdoptionRequirementType {
  Space   @map("SPACE")
  Medical @map("MEDICAL")

  @@map("ADOPTION_REQUIREMENT_TYPE")
}

enum MediaType {
  Image @map("IMAGE")
  Video @map("VIDEO")

  @@map("MEDIA_TYPE")
}
